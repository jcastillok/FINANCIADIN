'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="FINANCIADIN")>  _
Partial Public Class DataFINANCIADINDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Definiciones de métodos de extensibilidad"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCATPLAZOS(instance As CATPLAZOS)
    End Sub
  Partial Private Sub UpdateCATPLAZOS(instance As CATPLAZOS)
    End Sub
  Partial Private Sub DeleteCATPLAZOS(instance As CATPLAZOS)
    End Sub
  Partial Private Sub InsertCATTIPOCLIENTES(instance As CATTIPOCLIENTES)
    End Sub
  Partial Private Sub UpdateCATTIPOCLIENTES(instance As CATTIPOCLIENTES)
    End Sub
  Partial Private Sub DeleteCATTIPOCLIENTES(instance As CATTIPOCLIENTES)
    End Sub
  Partial Private Sub InsertCATSUCURSALES(instance As CATSUCURSALES)
    End Sub
  Partial Private Sub UpdateCATSUCURSALES(instance As CATSUCURSALES)
    End Sub
  Partial Private Sub DeleteCATSUCURSALES(instance As CATSUCURSALES)
    End Sub
  Partial Private Sub InsertCATTIPOPAGOS(instance As CATTIPOPAGOS)
    End Sub
  Partial Private Sub UpdateCATTIPOPAGOS(instance As CATTIPOPAGOS)
    End Sub
  Partial Private Sub DeleteCATTIPOPAGOS(instance As CATTIPOPAGOS)
    End Sub
  Partial Private Sub InsertCATTIPOUSUARIOS(instance As CATTIPOUSUARIOS)
    End Sub
  Partial Private Sub UpdateCATTIPOUSUARIOS(instance As CATTIPOUSUARIOS)
    End Sub
  Partial Private Sub DeleteCATTIPOUSUARIOS(instance As CATTIPOUSUARIOS)
    End Sub
  Partial Private Sub InsertCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub UpdateCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub DeleteCLIENTES(instance As CLIENTES)
    End Sub
  Partial Private Sub InsertCREDITOS(instance As CREDITOS)
    End Sub
  Partial Private Sub UpdateCREDITOS(instance As CREDITOS)
    End Sub
  Partial Private Sub DeleteCREDITOS(instance As CREDITOS)
    End Sub
  Partial Private Sub InsertPAGOS(instance As PAGOS)
    End Sub
  Partial Private Sub UpdatePAGOS(instance As PAGOS)
    End Sub
  Partial Private Sub DeletePAGOS(instance As PAGOS)
    End Sub
  Partial Private Sub InsertSOLICITUDES(instance As SOLICITUDES)
    End Sub
  Partial Private Sub UpdateSOLICITUDES(instance As SOLICITUDES)
    End Sub
  Partial Private Sub DeleteSOLICITUDES(instance As SOLICITUDES)
    End Sub
  Partial Private Sub InsertUSUARIOS(instance As USUARIOS)
    End Sub
  Partial Private Sub UpdateUSUARIOS(instance As USUARIOS)
    End Sub
  Partial Private Sub DeleteUSUARIOS(instance As USUARIOS)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("FinanciaDinConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property CATPLAZOS() As System.Data.Linq.Table(Of CATPLAZOS)
		Get
			Return Me.GetTable(Of CATPLAZOS)
		End Get
	End Property
	
	Public ReadOnly Property CATTIPOCLIENTES() As System.Data.Linq.Table(Of CATTIPOCLIENTES)
		Get
			Return Me.GetTable(Of CATTIPOCLIENTES)
		End Get
	End Property
	
	Public ReadOnly Property CATSUCURSALES() As System.Data.Linq.Table(Of CATSUCURSALES)
		Get
			Return Me.GetTable(Of CATSUCURSALES)
		End Get
	End Property
	
	Public ReadOnly Property CATTIPOPAGOS() As System.Data.Linq.Table(Of CATTIPOPAGOS)
		Get
			Return Me.GetTable(Of CATTIPOPAGOS)
		End Get
	End Property
	
	Public ReadOnly Property CATTIPOUSUARIOS() As System.Data.Linq.Table(Of CATTIPOUSUARIOS)
		Get
			Return Me.GetTable(Of CATTIPOUSUARIOS)
		End Get
	End Property
	
	Public ReadOnly Property CLIENTES() As System.Data.Linq.Table(Of CLIENTES)
		Get
			Return Me.GetTable(Of CLIENTES)
		End Get
	End Property
	
	Public ReadOnly Property CREDITOS() As System.Data.Linq.Table(Of CREDITOS)
		Get
			Return Me.GetTable(Of CREDITOS)
		End Get
	End Property
	
	Public ReadOnly Property PAGOS() As System.Data.Linq.Table(Of PAGOS)
		Get
			Return Me.GetTable(Of PAGOS)
		End Get
	End Property
	
	Public ReadOnly Property SOLICITUDES() As System.Data.Linq.Table(Of SOLICITUDES)
		Get
			Return Me.GetTable(Of SOLICITUDES)
		End Get
	End Property
	
	Public ReadOnly Property USUARIOS() As System.Data.Linq.Table(Of USUARIOS)
		Get
			Return Me.GetTable(Of USUARIOS)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATPLAZOS")>  _
Partial Public Class CATPLAZOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Descripcion As String
	
	Private _SOLICITUDES As EntitySet(Of SOLICITUDES)
	
	Private _SOLICITUDES1 As EntitySet(Of SOLICITUDES)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SOLICITUDES = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES, AddressOf Me.detach_SOLICITUDES)
		Me._SOLICITUDES1 = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES1, AddressOf Me.detach_SOLICITUDES1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATPLAZOS_SOLICITUDES", Storage:="_SOLICITUDES", ThisKey:="Id", OtherKey:="PlazoAut")>  _
	Public Property SOLICITUDES() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES
		End Get
		Set
			Me._SOLICITUDES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATPLAZOS_SOLICITUDES1", Storage:="_SOLICITUDES1", ThisKey:="Id", OtherKey:="PlazoSol")>  _
	Public Property SOLICITUDES1() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES1
		End Get
		Set
			Me._SOLICITUDES1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATPLAZOS = Me
	End Sub
	
	Private Sub detach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATPLAZOS = Nothing
	End Sub
	
	Private Sub attach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATPLAZOS1 = Me
	End Sub
	
	Private Sub detach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATPLAZOS1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATTIPOCLIENTES")>  _
Partial Public Class CATTIPOCLIENTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Descripcion As String
	
	Private _Login As String
	
	Private _CLIENTES As EntitySet(Of CLIENTES)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CLIENTES = New EntitySet(Of CLIENTES)(AddressOf Me.attach_CLIENTES, AddressOf Me.detach_CLIENTES)
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOCLIENTES_CLIENTES", Storage:="_CLIENTES", ThisKey:="Id", OtherKey:="Tipo")>  _
	Public Property CLIENTES() As EntitySet(Of CLIENTES)
		Get
			Return Me._CLIENTES
		End Get
		Set
			Me._CLIENTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOCLIENTES", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CATTIPOCLIENTES.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CATTIPOCLIENTES.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CLIENTES(ByVal entity As CLIENTES)
		Me.SendPropertyChanging
		entity.CATTIPOCLIENTES = Me
	End Sub
	
	Private Sub detach_CLIENTES(ByVal entity As CLIENTES)
		Me.SendPropertyChanging
		entity.CATTIPOCLIENTES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATSUCURSALES")>  _
Partial Public Class CATSUCURSALES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Descripcion As String
	
	Private _Login As String
	
	Private _USUARIOS1 As EntitySet(Of USUARIOS)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._USUARIOS1 = New EntitySet(Of USUARIOS)(AddressOf Me.attach_USUARIOS1, AddressOf Me.detach_USUARIOS1)
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATSUCURSALES_USUARIOS", Storage:="_USUARIOS1", ThisKey:="Id", OtherKey:="Sucursal")>  _
	Public Property USUARIOS1() As EntitySet(Of USUARIOS)
		Get
			Return Me._USUARIOS1
		End Get
		Set
			Me._USUARIOS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATSUCURSALES", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CATSUCURSALES.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CATSUCURSALES.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_USUARIOS1(ByVal entity As USUARIOS)
		Me.SendPropertyChanging
		entity.CATSUCURSALES1 = Me
	End Sub
	
	Private Sub detach_USUARIOS1(ByVal entity As USUARIOS)
		Me.SendPropertyChanging
		entity.CATSUCURSALES1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATTIPOPAGOS")>  _
Partial Public Class CATTIPOPAGOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Nombre As String
	
	Private _Descripcion As String
	
	Private _Login As String
	
	Private _SOLICITUDES As EntitySet(Of SOLICITUDES)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SOLICITUDES = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES, AddressOf Me.detach_SOLICITUDES)
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(30) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOPAGOS_SOLICITUDES", Storage:="_SOLICITUDES", ThisKey:="Id", OtherKey:="TipoPago")>  _
	Public Property SOLICITUDES() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES
		End Get
		Set
			Me._SOLICITUDES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOPAGOS", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CATTIPOPAGOS.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CATTIPOPAGOS.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATTIPOPAGOS = Me
	End Sub
	
	Private Sub detach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CATTIPOPAGOS = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CATTIPOUSUARIOS")>  _
Partial Public Class CATTIPOUSUARIOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Descripcion As String
	
	Private _Login As String
	
	Private _USUARIOS1 As EntitySet(Of USUARIOS)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnDescripcionChanging(value As String)
    End Sub
    Partial Private Sub OnDescripcionChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._USUARIOS1 = New EntitySet(Of USUARIOS)(AddressOf Me.attach_USUARIOS1, AddressOf Me.detach_USUARIOS1)
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Descripcion", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Descripcion() As String
		Get
			Return Me._Descripcion
		End Get
		Set
			If (String.Equals(Me._Descripcion, value) = false) Then
				Me.OnDescripcionChanging(value)
				Me.SendPropertyChanging
				Me._Descripcion = value
				Me.SendPropertyChanged("Descripcion")
				Me.OnDescripcionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOUSUARIOS_USUARIOS", Storage:="_USUARIOS1", ThisKey:="id", OtherKey:="Tipo")>  _
	Public Property USUARIOS1() As EntitySet(Of USUARIOS)
		Get
			Return Me._USUARIOS1
		End Get
		Set
			Me._USUARIOS1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOUSUARIOS", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CATTIPOUSUARIOS.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CATTIPOUSUARIOS.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_USUARIOS1(ByVal entity As USUARIOS)
		Me.SendPropertyChanging
		entity.CATTIPOUSUARIOS1 = Me
	End Sub
	
	Private Sub detach_USUARIOS1(ByVal entity As USUARIOS)
		Me.SendPropertyChanging
		entity.CATTIPOUSUARIOS1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CLIENTES")>  _
Partial Public Class CLIENTES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _PrimNombre As String
	
	Private _SegNombre As String
	
	Private _PrimApellido As String
	
	Private _SegApellido As String
	
	Private _Login As String
	
	Private _Tipo As Integer
	
	Private _RFC As String
	
	Private _CURP As String
	
	Private _Calle As String
	
	Private _NumExt As String
	
	Private _NumInt As String
	
	Private _Colonia As String
	
	Private _Localidad As String
	
	Private _Referencia As String
	
	Private _Pais As String
	
	Private _Estado As String
	
	Private _Municipio As String
	
	Private _CodPostal As Integer
	
	Private _FecNac As Date
	
	Private _Telefono As String
	
	Private _EMail As String
	
	Private _Estatus As Boolean
	
	Private _FecRegistro As Date
	
	Private _Celular As String
	
	Private _NomAval As String
	
	Private _DirAval As String
	
	Private _TelAval As String
	
	Private _CREDITOS As EntitySet(Of CREDITOS)
	
	Private _PAGOS As EntitySet(Of PAGOS)
	
	Private _SOLICITUDES As EntitySet(Of SOLICITUDES)
	
	Private _CATTIPOCLIENTES As EntityRef(Of CATTIPOCLIENTES)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPrimNombreChanging(value As String)
    End Sub
    Partial Private Sub OnPrimNombreChanged()
    End Sub
    Partial Private Sub OnSegNombreChanging(value As String)
    End Sub
    Partial Private Sub OnSegNombreChanged()
    End Sub
    Partial Private Sub OnPrimApellidoChanging(value As String)
    End Sub
    Partial Private Sub OnPrimApellidoChanged()
    End Sub
    Partial Private Sub OnSegApellidoChanging(value As String)
    End Sub
    Partial Private Sub OnSegApellidoChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnRFCChanging(value As String)
    End Sub
    Partial Private Sub OnRFCChanged()
    End Sub
    Partial Private Sub OnCURPChanging(value As String)
    End Sub
    Partial Private Sub OnCURPChanged()
    End Sub
    Partial Private Sub OnCalleChanging(value As String)
    End Sub
    Partial Private Sub OnCalleChanged()
    End Sub
    Partial Private Sub OnNumExtChanging(value As String)
    End Sub
    Partial Private Sub OnNumExtChanged()
    End Sub
    Partial Private Sub OnNumIntChanging(value As String)
    End Sub
    Partial Private Sub OnNumIntChanged()
    End Sub
    Partial Private Sub OnColoniaChanging(value As String)
    End Sub
    Partial Private Sub OnColoniaChanged()
    End Sub
    Partial Private Sub OnLocalidadChanging(value As String)
    End Sub
    Partial Private Sub OnLocalidadChanged()
    End Sub
    Partial Private Sub OnReferenciaChanging(value As String)
    End Sub
    Partial Private Sub OnReferenciaChanged()
    End Sub
    Partial Private Sub OnPaisChanging(value As String)
    End Sub
    Partial Private Sub OnPaisChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As String)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnMunicipioChanging(value As String)
    End Sub
    Partial Private Sub OnMunicipioChanged()
    End Sub
    Partial Private Sub OnCodPostalChanging(value As Integer)
    End Sub
    Partial Private Sub OnCodPostalChanged()
    End Sub
    Partial Private Sub OnFecNacChanging(value As Date)
    End Sub
    Partial Private Sub OnFecNacChanged()
    End Sub
    Partial Private Sub OnTelefonoChanging(value As String)
    End Sub
    Partial Private Sub OnTelefonoChanged()
    End Sub
    Partial Private Sub OnEMailChanging(value As String)
    End Sub
    Partial Private Sub OnEMailChanged()
    End Sub
    Partial Private Sub OnEstatusChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEstatusChanged()
    End Sub
    Partial Private Sub OnFecRegistroChanging(value As Date)
    End Sub
    Partial Private Sub OnFecRegistroChanged()
    End Sub
    Partial Private Sub OnCelularChanging(value As String)
    End Sub
    Partial Private Sub OnCelularChanged()
    End Sub
    Partial Private Sub OnNomAvalChanging(value As String)
    End Sub
    Partial Private Sub OnNomAvalChanged()
    End Sub
    Partial Private Sub OnDirAvalChanging(value As String)
    End Sub
    Partial Private Sub OnDirAvalChanged()
    End Sub
    Partial Private Sub OnTelAvalChanging(value As String)
    End Sub
    Partial Private Sub OnTelAvalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CREDITOS = New EntitySet(Of CREDITOS)(AddressOf Me.attach_CREDITOS, AddressOf Me.detach_CREDITOS)
		Me._PAGOS = New EntitySet(Of PAGOS)(AddressOf Me.attach_PAGOS, AddressOf Me.detach_PAGOS)
		Me._SOLICITUDES = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES, AddressOf Me.detach_SOLICITUDES)
		Me._CATTIPOCLIENTES = CType(Nothing, EntityRef(Of CATTIPOCLIENTES))
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimNombre", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PrimNombre() As String
		Get
			Return Me._PrimNombre
		End Get
		Set
			If (String.Equals(Me._PrimNombre, value) = false) Then
				Me.OnPrimNombreChanging(value)
				Me.SendPropertyChanging
				Me._PrimNombre = value
				Me.SendPropertyChanged("PrimNombre")
				Me.OnPrimNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SegNombre", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property SegNombre() As String
		Get
			Return Me._SegNombre
		End Get
		Set
			If (String.Equals(Me._SegNombre, value) = false) Then
				Me.OnSegNombreChanging(value)
				Me.SendPropertyChanging
				Me._SegNombre = value
				Me.SendPropertyChanged("SegNombre")
				Me.OnSegNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimApellido", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PrimApellido() As String
		Get
			Return Me._PrimApellido
		End Get
		Set
			If (String.Equals(Me._PrimApellido, value) = false) Then
				Me.OnPrimApellidoChanging(value)
				Me.SendPropertyChanging
				Me._PrimApellido = value
				Me.SendPropertyChanged("PrimApellido")
				Me.OnPrimApellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SegApellido", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property SegApellido() As String
		Get
			Return Me._SegApellido
		End Get
		Set
			If (String.Equals(Me._SegApellido, value) = false) Then
				Me.OnSegApellidoChanging(value)
				Me.SendPropertyChanging
				Me._SegApellido = value
				Me.SendPropertyChanged("SegApellido")
				Me.OnSegApellidoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="Int NOT NULL")>  _
	Public Property Tipo() As Integer
		Get
			Return Me._Tipo
		End Get
		Set
			If ((Me._Tipo = value)  _
						= false) Then
				If Me._CATTIPOCLIENTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RFC", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RFC() As String
		Get
			Return Me._RFC
		End Get
		Set
			If (String.Equals(Me._RFC, value) = false) Then
				Me.OnRFCChanging(value)
				Me.SendPropertyChanging
				Me._RFC = value
				Me.SendPropertyChanged("RFC")
				Me.OnRFCChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CURP", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CURP() As String
		Get
			Return Me._CURP
		End Get
		Set
			If (String.Equals(Me._CURP, value) = false) Then
				Me.OnCURPChanging(value)
				Me.SendPropertyChanging
				Me._CURP = value
				Me.SendPropertyChanged("CURP")
				Me.OnCURPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Calle", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Calle() As String
		Get
			Return Me._Calle
		End Get
		Set
			If (String.Equals(Me._Calle, value) = false) Then
				Me.OnCalleChanging(value)
				Me.SendPropertyChanging
				Me._Calle = value
				Me.SendPropertyChanged("Calle")
				Me.OnCalleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumExt", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property NumExt() As String
		Get
			Return Me._NumExt
		End Get
		Set
			If (String.Equals(Me._NumExt, value) = false) Then
				Me.OnNumExtChanging(value)
				Me.SendPropertyChanging
				Me._NumExt = value
				Me.SendPropertyChanged("NumExt")
				Me.OnNumExtChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumInt", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property NumInt() As String
		Get
			Return Me._NumInt
		End Get
		Set
			If (String.Equals(Me._NumInt, value) = false) Then
				Me.OnNumIntChanging(value)
				Me.SendPropertyChanging
				Me._NumInt = value
				Me.SendPropertyChanged("NumInt")
				Me.OnNumIntChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Colonia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Colonia() As String
		Get
			Return Me._Colonia
		End Get
		Set
			If (String.Equals(Me._Colonia, value) = false) Then
				Me.OnColoniaChanging(value)
				Me.SendPropertyChanging
				Me._Colonia = value
				Me.SendPropertyChanged("Colonia")
				Me.OnColoniaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Localidad", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Localidad() As String
		Get
			Return Me._Localidad
		End Get
		Set
			If (String.Equals(Me._Localidad, value) = false) Then
				Me.OnLocalidadChanging(value)
				Me.SendPropertyChanging
				Me._Localidad = value
				Me.SendPropertyChanged("LocalidadNac")
				Me.OnLocalidadChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Referencia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Referencia() As String
		Get
			Return Me._Referencia
		End Get
		Set
			If (String.Equals(Me._Referencia, value) = false) Then
				Me.OnReferenciaChanging(value)
				Me.SendPropertyChanging
				Me._Referencia = value
				Me.SendPropertyChanged("Referencia")
				Me.OnReferenciaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pais", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Pais() As String
		Get
			Return Me._Pais
		End Get
		Set
			If (String.Equals(Me._Pais, value) = false) Then
				Me.OnPaisChanging(value)
				Me.SendPropertyChanging
				Me._Pais = value
				Me.SendPropertyChanged("Pais")
				Me.OnPaisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Estado() As String
		Get
			Return Me._Estado
		End Get
		Set
			If (String.Equals(Me._Estado, value) = false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Municipio", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Municipio() As String
		Get
			Return Me._Municipio
		End Get
		Set
			If (String.Equals(Me._Municipio, value) = false) Then
				Me.OnMunicipioChanging(value)
				Me.SendPropertyChanging
				Me._Municipio = value
				Me.SendPropertyChanged("Municipio")
				Me.OnMunicipioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CodPostal", DbType:="Int NOT NULL")>  _
	Public Property CodPostal() As Integer
		Get
			Return Me._CodPostal
		End Get
		Set
			If ((Me._CodPostal = value)  _
						= false) Then
				Me.OnCodPostalChanging(value)
				Me.SendPropertyChanging
				Me._CodPostal = value
				Me.SendPropertyChanged("CodPostal")
				Me.OnCodPostalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecNac", DbType:="DateTime NOT NULL")>  _
	Public Property FecNac() As Date
		Get
			Return Me._FecNac
		End Get
		Set
			If ((Me._FecNac = value)  _
						= false) Then
				Me.OnFecNacChanging(value)
				Me.SendPropertyChanging
				Me._FecNac = value
				Me.SendPropertyChanged("FecNac")
				Me.OnFecNacChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Telefono", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Telefono() As String
		Get
			Return Me._Telefono
		End Get
		Set
			If (String.Equals(Me._Telefono, value) = false) Then
				Me.OnTelefonoChanging(value)
				Me.SendPropertyChanging
				Me._Telefono = value
				Me.SendPropertyChanged("Telefono")
				Me.OnTelefonoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMail", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EMail() As String
		Get
			Return Me._EMail
		End Get
		Set
			If (String.Equals(Me._EMail, value) = false) Then
				Me.OnEMailChanging(value)
				Me.SendPropertyChanging
				Me._EMail = value
				Me.SendPropertyChanged("EMail")
				Me.OnEMailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estatus", DbType:="Bit NOT NULL")>  _
	Public Property Estatus() As Boolean
		Get
			Return Me._Estatus
		End Get
		Set
			If ((Me._Estatus = value)  _
						= false) Then
				Me.OnEstatusChanging(value)
				Me.SendPropertyChanging
				Me._Estatus = value
				Me.SendPropertyChanged("Estatus")
				Me.OnEstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecRegistro", DbType:="DateTime NOT NULL")>  _
	Public Property FecRegistro() As Date
		Get
			Return Me._FecRegistro
		End Get
		Set
			If ((Me._FecRegistro = value)  _
						= false) Then
				Me.OnFecRegistroChanging(value)
				Me.SendPropertyChanging
				Me._FecRegistro = value
				Me.SendPropertyChanged("FecRegistro")
				Me.OnFecRegistroChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Celular", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property Celular() As String
		Get
			Return Me._Celular
		End Get
		Set
			If (String.Equals(Me._Celular, value) = false) Then
				Me.OnCelularChanging(value)
				Me.SendPropertyChanging
				Me._Celular = value
				Me.SendPropertyChanged("Celular")
				Me.OnCelularChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NomAval", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property NomAval() As String
		Get
			Return Me._NomAval
		End Get
		Set
			If (String.Equals(Me._NomAval, value) = false) Then
				Me.OnNomAvalChanging(value)
				Me.SendPropertyChanging
				Me._NomAval = value
				Me.SendPropertyChanged("NomAval")
				Me.OnNomAvalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DirAval", DbType:="VarChar(140) NOT NULL", CanBeNull:=false)>  _
	Public Property DirAval() As String
		Get
			Return Me._DirAval
		End Get
		Set
			If (String.Equals(Me._DirAval, value) = false) Then
				Me.OnDirAvalChanging(value)
				Me.SendPropertyChanging
				Me._DirAval = value
				Me.SendPropertyChanged("DirAval")
				Me.OnDirAvalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelAval", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property TelAval() As String
		Get
			Return Me._TelAval
		End Get
		Set
			If (String.Equals(Me._TelAval, value) = false) Then
				Me.OnTelAvalChanging(value)
				Me.SendPropertyChanging
				Me._TelAval = value
				Me.SendPropertyChanged("TelAval")
				Me.OnTelAvalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_CREDITOS", Storage:="_CREDITOS", ThisKey:="Id", OtherKey:="Id_Cliente")>  _
	Public Property CREDITOS() As EntitySet(Of CREDITOS)
		Get
			Return Me._CREDITOS
		End Get
		Set
			Me._CREDITOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_PAGOS", Storage:="_PAGOS", ThisKey:="Id", OtherKey:="Id_Cliente")>  _
	Public Property PAGOS() As EntitySet(Of PAGOS)
		Get
			Return Me._PAGOS
		End Get
		Set
			Me._PAGOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_SOLICITUDES", Storage:="_SOLICITUDES", ThisKey:="Id", OtherKey:="Id_Cliente")>  _
	Public Property SOLICITUDES() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES
		End Get
		Set
			Me._SOLICITUDES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOCLIENTES_CLIENTES", Storage:="_CATTIPOCLIENTES", ThisKey:="Tipo", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CATTIPOCLIENTES() As CATTIPOCLIENTES
		Get
			Return Me._CATTIPOCLIENTES.Entity
		End Get
		Set
			Dim previousValue As CATTIPOCLIENTES = Me._CATTIPOCLIENTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATTIPOCLIENTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATTIPOCLIENTES.Entity = Nothing
					previousValue.CLIENTES.Remove(Me)
				End If
				Me._CATTIPOCLIENTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CLIENTES.Add(Me)
					Me._Tipo = value.Id
				Else
					Me._Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATTIPOCLIENTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CLIENTES", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CLIENTES.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CLIENTES.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Me
	End Sub
	
	Private Sub detach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Nothing
	End Sub
	
	Private Sub attach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Me
	End Sub
	
	Private Sub detach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.CLIENTES = Nothing
	End Sub
	
	Private Sub attach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CLIENTES = Me
	End Sub
	
	Private Sub detach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CLIENTES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CREDITOS")>  _
Partial Public Class CREDITOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Sol As Integer
	
	Private _Id_Cliente As Integer
	
	Private _FecInicio As Date
	
	Private _FecFin As Date
	
	Private _FecPrimPago As Date
	
	Private _Monto As Decimal
	
	Private _Plazo As Integer
	
	Private _NumPagos As Integer
	
	Private _TasaRef As Double
	
	Private _TipoAmort As String
	
	Private _Sobretasa As Double
	
	Private _TasaMoratoria As Double
	
	Private _Impuesto As Decimal
	
	Private _Pago As Decimal
	
	Private _Login As String
	
	Private _PAGOS As EntitySet(Of PAGOS)
	
	Private _SOLICITUDES1 As EntitySet(Of SOLICITUDES)
	
	Private _CLIENTES As EntityRef(Of CLIENTES)
	
	Private _SOLICITUDES As EntityRef(Of SOLICITUDES)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_SolChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_SolChanged()
    End Sub
    Partial Private Sub OnId_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_ClienteChanged()
    End Sub
    Partial Private Sub OnFecInicioChanging(value As Date)
    End Sub
    Partial Private Sub OnFecInicioChanged()
    End Sub
    Partial Private Sub OnFecFinChanging(value As Date)
    End Sub
    Partial Private Sub OnFecFinChanged()
    End Sub
    Partial Private Sub OnFecPrimPagoChanging(value As Date)
    End Sub
    Partial Private Sub OnFecPrimPagoChanged()
    End Sub
    Partial Private Sub OnMontoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMontoChanged()
    End Sub
    Partial Private Sub OnPlazoChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlazoChanged()
    End Sub
    Partial Private Sub OnNumPagosChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumPagosChanged()
    End Sub
    Partial Private Sub OnTasaRefChanging(value As Double)
    End Sub
    Partial Private Sub OnTasaRefChanged()
    End Sub
    Partial Private Sub OnTipoAmortChanging(value As String)
    End Sub
    Partial Private Sub OnTipoAmortChanged()
    End Sub
    Partial Private Sub OnSobretasaChanging(value As Double)
    End Sub
    Partial Private Sub OnSobretasaChanged()
    End Sub
    Partial Private Sub OnTasaMoratoriaChanging(value As Double)
    End Sub
    Partial Private Sub OnTasaMoratoriaChanged()
    End Sub
    Partial Private Sub OnImpuestoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImpuestoChanged()
    End Sub
    Partial Private Sub OnPagoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnPagoChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PAGOS = New EntitySet(Of PAGOS)(AddressOf Me.attach_PAGOS, AddressOf Me.detach_PAGOS)
		Me._SOLICITUDES1 = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES1, AddressOf Me.detach_SOLICITUDES1)
		Me._CLIENTES = CType(Nothing, EntityRef(Of CLIENTES))
		Me._SOLICITUDES = CType(Nothing, EntityRef(Of SOLICITUDES))
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Sol", DbType:="Int NOT NULL")>  _
	Public Property Id_Sol() As Integer
		Get
			Return Me._Id_Sol
		End Get
		Set
			If ((Me._Id_Sol = value)  _
						= false) Then
				If Me._SOLICITUDES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_SolChanging(value)
				Me.SendPropertyChanging
				Me._Id_Sol = value
				Me.SendPropertyChanged("Id_Sol")
				Me.OnId_SolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Cliente", DbType:="Int NOT NULL")>  _
	Public Property Id_Cliente() As Integer
		Get
			Return Me._Id_Cliente
		End Get
		Set
			If ((Me._Id_Cliente = value)  _
						= false) Then
				If Me._CLIENTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Cliente = value
				Me.SendPropertyChanged("Id_Cliente")
				Me.OnId_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecInicio", DbType:="DateTime NOT NULL")>  _
	Public Property FecInicio() As Date
		Get
			Return Me._FecInicio
		End Get
		Set
			If ((Me._FecInicio = value)  _
						= false) Then
				Me.OnFecInicioChanging(value)
				Me.SendPropertyChanging
				Me._FecInicio = value
				Me.SendPropertyChanged("FecInicio")
				Me.OnFecInicioChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecFin", DbType:="DateTime NOT NULL")>  _
	Public Property FecFin() As Date
		Get
			Return Me._FecFin
		End Get
		Set
			If ((Me._FecFin = value)  _
						= false) Then
				Me.OnFecFinChanging(value)
				Me.SendPropertyChanging
				Me._FecFin = value
				Me.SendPropertyChanged("FecFin")
				Me.OnFecFinChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecPrimPago", DbType:="DateTime NOT NULL")>  _
	Public Property FecPrimPago() As Date
		Get
			Return Me._FecPrimPago
		End Get
		Set
			If ((Me._FecPrimPago = value)  _
						= false) Then
				Me.OnFecPrimPagoChanging(value)
				Me.SendPropertyChanging
				Me._FecPrimPago = value
				Me.SendPropertyChanged("FecPrimPago")
				Me.OnFecPrimPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monto", DbType:="Money NOT NULL")>  _
	Public Property Monto() As Decimal
		Get
			Return Me._Monto
		End Get
		Set
			If ((Me._Monto = value)  _
						= false) Then
				Me.OnMontoChanging(value)
				Me.SendPropertyChanging
				Me._Monto = value
				Me.SendPropertyChanged("Monto")
				Me.OnMontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Plazo", DbType:="Int NOT NULL")>  _
	Public Property Plazo() As Integer
		Get
			Return Me._Plazo
		End Get
		Set
			If ((Me._Plazo = value)  _
						= false) Then
				Me.OnPlazoChanging(value)
				Me.SendPropertyChanging
				Me._Plazo = value
				Me.SendPropertyChanged("Plazo")
				Me.OnPlazoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumPagos", DbType:="Int NOT NULL")>  _
	Public Property NumPagos() As Integer
		Get
			Return Me._NumPagos
		End Get
		Set
			If ((Me._NumPagos = value)  _
						= false) Then
				Me.OnNumPagosChanging(value)
				Me.SendPropertyChanging
				Me._NumPagos = value
				Me.SendPropertyChanged("NumPagos")
				Me.OnNumPagosChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TasaRef", DbType:="Float NOT NULL")>  _
	Public Property TasaRef() As Double
		Get
			Return Me._TasaRef
		End Get
		Set
			If ((Me._TasaRef = value)  _
						= false) Then
				Me.OnTasaRefChanging(value)
				Me.SendPropertyChanging
				Me._TasaRef = value
				Me.SendPropertyChanged("TasaRef")
				Me.OnTasaRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoAmort", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoAmort() As String
		Get
			Return Me._TipoAmort
		End Get
		Set
			If (String.Equals(Me._TipoAmort, value) = false) Then
				Me.OnTipoAmortChanging(value)
				Me.SendPropertyChanging
				Me._TipoAmort = value
				Me.SendPropertyChanged("TipoAmort")
				Me.OnTipoAmortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sobretasa", DbType:="Float NOT NULL")>  _
	Public Property Sobretasa() As Double
		Get
			Return Me._Sobretasa
		End Get
		Set
			If ((Me._Sobretasa = value)  _
						= false) Then
				Me.OnSobretasaChanging(value)
				Me.SendPropertyChanging
				Me._Sobretasa = value
				Me.SendPropertyChanged("Sobretasa")
				Me.OnSobretasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TasaMoratoria", DbType:="Float NOT NULL")>  _
	Public Property TasaMoratoria() As Double
		Get
			Return Me._TasaMoratoria
		End Get
		Set
			If ((Me._TasaMoratoria = value)  _
						= false) Then
				Me.OnTasaMoratoriaChanging(value)
				Me.SendPropertyChanging
				Me._TasaMoratoria = value
				Me.SendPropertyChanged("TasaMoratoria")
				Me.OnTasaMoratoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Impuesto", DbType:="Money NOT NULL")>  _
	Public Property Impuesto() As Decimal
		Get
			Return Me._Impuesto
		End Get
		Set
			If ((Me._Impuesto = value)  _
						= false) Then
				Me.OnImpuestoChanging(value)
				Me.SendPropertyChanging
				Me._Impuesto = value
				Me.SendPropertyChanged("Impuesto")
				Me.OnImpuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pago", DbType:="Money NOT NULL")>  _
	Public Property Pago() As Decimal
		Get
			Return Me._Pago
		End Get
		Set
			If ((Me._Pago = value)  _
						= false) Then
				Me.OnPagoChanging(value)
				Me.SendPropertyChanging
				Me._Pago = value
				Me.SendPropertyChanged("Pago")
				Me.OnPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CREDITOS_PAGOS", Storage:="_PAGOS", ThisKey:="Id", OtherKey:="Id_Credito")>  _
	Public Property PAGOS() As EntitySet(Of PAGOS)
		Get
			Return Me._PAGOS
		End Get
		Set
			Me._PAGOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CREDITOS_SOLICITUDES", Storage:="_SOLICITUDES1", ThisKey:="Id", OtherKey:="Id_A_Liquidar")>  _
	Public Property SOLICITUDES1() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES1
		End Get
		Set
			Me._SOLICITUDES1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_CREDITOS", Storage:="_CLIENTES", ThisKey:="Id_Cliente", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CLIENTES() As CLIENTES
		Get
			Return Me._CLIENTES.Entity
		End Get
		Set
			Dim previousValue As CLIENTES = Me._CLIENTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CLIENTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CLIENTES.Entity = Nothing
					previousValue.CREDITOS.Remove(Me)
				End If
				Me._CLIENTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CREDITOS.Add(Me)
					Me._Id_Cliente = value.Id
				Else
					Me._Id_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CLIENTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOLICITUDES_CREDITOS", Storage:="_SOLICITUDES", ThisKey:="Id_Sol", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SOLICITUDES() As SOLICITUDES
		Get
			Return Me._SOLICITUDES.Entity
		End Get
		Set
			Dim previousValue As SOLICITUDES = Me._SOLICITUDES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SOLICITUDES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SOLICITUDES.Entity = Nothing
					previousValue.CREDITOS.Remove(Me)
				End If
				Me._SOLICITUDES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CREDITOS.Add(Me)
					Me._Id_Sol = value.Id
				Else
					Me._Id_Sol = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SOLICITUDES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CREDITOS", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.CREDITOS.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CREDITOS.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.CREDITOS = Me
	End Sub
	
	Private Sub detach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.CREDITOS = Nothing
	End Sub
	
	Private Sub attach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CREDITOS1 = Me
	End Sub
	
	Private Sub detach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.CREDITOS1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PAGOS")>  _
Partial Public Class PAGOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Credito As Integer
	
	Private _Id_Cliente As Integer
	
	Private _Id_Sucursal As Integer
	
	Private _FecPago As Date
	
	Private _Monto As Decimal
	
	Private _FecProxPago As Date
	
	Private _Login As String
	
	Private _CLIENTES As EntityRef(Of CLIENTES)
	
	Private _CREDITOS As EntityRef(Of CREDITOS)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_CreditoChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_CreditoChanged()
    End Sub
    Partial Private Sub OnId_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_ClienteChanged()
    End Sub
    Partial Private Sub OnId_SucursalChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_SucursalChanged()
    End Sub
    Partial Private Sub OnFecPagoChanging(value As Date)
    End Sub
    Partial Private Sub OnFecPagoChanged()
    End Sub
    Partial Private Sub OnMontoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMontoChanged()
    End Sub
    Partial Private Sub OnFecProxPagoChanging(value As Date)
    End Sub
    Partial Private Sub OnFecProxPagoChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CLIENTES = CType(Nothing, EntityRef(Of CLIENTES))
		Me._CREDITOS = CType(Nothing, EntityRef(Of CREDITOS))
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Credito", DbType:="Int NOT NULL")>  _
	Public Property Id_Credito() As Integer
		Get
			Return Me._Id_Credito
		End Get
		Set
			If ((Me._Id_Credito = value)  _
						= false) Then
				If Me._CREDITOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_CreditoChanging(value)
				Me.SendPropertyChanging
				Me._Id_Credito = value
				Me.SendPropertyChanged("Id_Credito")
				Me.OnId_CreditoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Cliente", DbType:="Int NOT NULL")>  _
	Public Property Id_Cliente() As Integer
		Get
			Return Me._Id_Cliente
		End Get
		Set
			If ((Me._Id_Cliente = value)  _
						= false) Then
				If Me._CLIENTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Cliente = value
				Me.SendPropertyChanged("Id_Cliente")
				Me.OnId_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Sucursal", DbType:="Int NOT NULL")>  _
	Public Property Id_Sucursal() As Integer
		Get
			Return Me._Id_Sucursal
		End Get
		Set
			If ((Me._Id_Sucursal = value)  _
						= false) Then
				Me.OnId_SucursalChanging(value)
				Me.SendPropertyChanging
				Me._Id_Sucursal = value
				Me.SendPropertyChanged("Id_Sucursal")
				Me.OnId_SucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecPago", DbType:="DateTime NOT NULL")>  _
	Public Property FecPago() As Date
		Get
			Return Me._FecPago
		End Get
		Set
			If ((Me._FecPago = value)  _
						= false) Then
				Me.OnFecPagoChanging(value)
				Me.SendPropertyChanging
				Me._FecPago = value
				Me.SendPropertyChanged("FecPago")
				Me.OnFecPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Monto", DbType:="Money NOT NULL")>  _
	Public Property Monto() As Decimal
		Get
			Return Me._Monto
		End Get
		Set
			If ((Me._Monto = value)  _
						= false) Then
				Me.OnMontoChanging(value)
				Me.SendPropertyChanging
				Me._Monto = value
				Me.SendPropertyChanged("Monto")
				Me.OnMontoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecProxPago", DbType:="DateTime NOT NULL")>  _
	Public Property FecProxPago() As Date
		Get
			Return Me._FecProxPago
		End Get
		Set
			If ((Me._FecProxPago = value)  _
						= false) Then
				Me.OnFecProxPagoChanging(value)
				Me.SendPropertyChanging
				Me._FecProxPago = value
				Me.SendPropertyChanged("FecProxPago")
				Me.OnFecProxPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_PAGOS", Storage:="_CLIENTES", ThisKey:="Id_Cliente", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CLIENTES() As CLIENTES
		Get
			Return Me._CLIENTES.Entity
		End Get
		Set
			Dim previousValue As CLIENTES = Me._CLIENTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CLIENTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CLIENTES.Entity = Nothing
					previousValue.PAGOS.Remove(Me)
				End If
				Me._CLIENTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PAGOS.Add(Me)
					Me._Id_Cliente = value.Id
				Else
					Me._Id_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CLIENTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CREDITOS_PAGOS", Storage:="_CREDITOS", ThisKey:="Id_Credito", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CREDITOS() As CREDITOS
		Get
			Return Me._CREDITOS.Entity
		End Get
		Set
			Dim previousValue As CREDITOS = Me._CREDITOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CREDITOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CREDITOS.Entity = Nothing
					previousValue.PAGOS.Remove(Me)
				End If
				Me._CREDITOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PAGOS.Add(Me)
					Me._Id_Credito = value.Id
				Else
					Me._Id_Credito = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CREDITOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_PAGOS", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.PAGOS.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PAGOS.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SOLICITUDES")>  _
Partial Public Class SOLICITUDES
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Cliente As Integer
	
	Private _FecSolicitud As Date
	
	Private _FecAutorizado As System.Nullable(Of Date)
	
	Private _FecDisposicion As System.Nullable(Of Date)
	
	Private _MontoSolicitud As Decimal
	
	Private _MontoAut As System.Nullable(Of Decimal)
	
	Private _PlazoSol As Integer
	
	Private _PlazoAut As System.Nullable(Of Integer)
	
	Private _NumPagosSol As Integer
	
	Private _NumPagosAut As System.Nullable(Of Integer)
	
	Private _LiquidaAnterior As Boolean
	
	Private _Id_A_Liquidar As System.Nullable(Of Integer)
	
	Private _MontoLiquid As System.Nullable(Of Decimal)
	
	Private _TasaRef As Double
	
	Private _TipoAmort As String
	
	Private _Sobretasa As Double
	
	Private _TasaMoratoria As Double
	
	Private _Impuesto As Decimal
	
	Private _TipoGarantia As String
	
	Private _ClaseGarantia As String
	
	Private _ValorGarantia As Decimal
	
	Private _DescripGarantia As String
	
	Private _IngresoCliente As System.Nullable(Of Integer)
	
	Private _TipoPago As Integer
	
	Private _Pago As System.Nullable(Of Decimal)
	
	Private _FecCaptura As Date
	
	Private _FecUltMod As Date
	
	Private _Login As String
	
	Private _Autorizado As Boolean
	
	Private _LoginAut As String
	
	Private _CREDITOS As EntitySet(Of CREDITOS)
	
	Private _CATPLAZOS As EntityRef(Of CATPLAZOS)
	
	Private _CATPLAZOS1 As EntityRef(Of CATPLAZOS)
	
	Private _CATTIPOPAGOS As EntityRef(Of CATTIPOPAGOS)
	
	Private _CLIENTES As EntityRef(Of CLIENTES)
	
	Private _CREDITOS1 As EntityRef(Of CREDITOS)
	
	Private _USUARIOS As EntityRef(Of USUARIOS)
	
	Private _USUARIOS1 As EntityRef(Of USUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_ClienteChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_ClienteChanged()
    End Sub
    Partial Private Sub OnFecSolicitudChanging(value As Date)
    End Sub
    Partial Private Sub OnFecSolicitudChanged()
    End Sub
    Partial Private Sub OnFecAutorizadoChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecAutorizadoChanged()
    End Sub
    Partial Private Sub OnFecDisposicionChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFecDisposicionChanged()
    End Sub
    Partial Private Sub OnMontoSolicitudChanging(value As Decimal)
    End Sub
    Partial Private Sub OnMontoSolicitudChanged()
    End Sub
    Partial Private Sub OnMontoAutChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMontoAutChanged()
    End Sub
    Partial Private Sub OnPlazoSolChanging(value As Integer)
    End Sub
    Partial Private Sub OnPlazoSolChanged()
    End Sub
    Partial Private Sub OnPlazoAutChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPlazoAutChanged()
    End Sub
    Partial Private Sub OnNumPagosSolChanging(value As Integer)
    End Sub
    Partial Private Sub OnNumPagosSolChanged()
    End Sub
    Partial Private Sub OnNumPagosAutChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNumPagosAutChanged()
    End Sub
    Partial Private Sub OnLiquidaAnteriorChanging(value As Boolean)
    End Sub
    Partial Private Sub OnLiquidaAnteriorChanged()
    End Sub
    Partial Private Sub OnId_A_LiquidarChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnId_A_LiquidarChanged()
    End Sub
    Partial Private Sub OnMontoLiquidChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMontoLiquidChanged()
    End Sub
    Partial Private Sub OnTasaRefChanging(value As Double)
    End Sub
    Partial Private Sub OnTasaRefChanged()
    End Sub
    Partial Private Sub OnTipoAmortChanging(value As String)
    End Sub
    Partial Private Sub OnTipoAmortChanged()
    End Sub
    Partial Private Sub OnSobretasaChanging(value As Double)
    End Sub
    Partial Private Sub OnSobretasaChanged()
    End Sub
    Partial Private Sub OnTasaMoratoriaChanging(value As Double)
    End Sub
    Partial Private Sub OnTasaMoratoriaChanged()
    End Sub
    Partial Private Sub OnImpuestoChanging(value As Decimal)
    End Sub
    Partial Private Sub OnImpuestoChanged()
    End Sub
    Partial Private Sub OnTipoGarantiaChanging(value As String)
    End Sub
    Partial Private Sub OnTipoGarantiaChanged()
    End Sub
    Partial Private Sub OnClaseGarantiaChanging(value As String)
    End Sub
    Partial Private Sub OnClaseGarantiaChanged()
    End Sub
    Partial Private Sub OnValorGarantiaChanging(value As Decimal)
    End Sub
    Partial Private Sub OnValorGarantiaChanged()
    End Sub
    Partial Private Sub OnDescripGarantiaChanging(value As String)
    End Sub
    Partial Private Sub OnDescripGarantiaChanged()
    End Sub
    Partial Private Sub OnIngresoClienteChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIngresoClienteChanged()
    End Sub
    Partial Private Sub OnTipoPagoChanging(value As Integer)
    End Sub
    Partial Private Sub OnTipoPagoChanged()
    End Sub
    Partial Private Sub OnPagoChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPagoChanged()
    End Sub
    Partial Private Sub OnFecCapturaChanging(value As Date)
    End Sub
    Partial Private Sub OnFecCapturaChanged()
    End Sub
    Partial Private Sub OnFecUltModChanging(value As Date)
    End Sub
    Partial Private Sub OnFecUltModChanged()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    Partial Private Sub OnAutorizadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnAutorizadoChanged()
    End Sub
    Partial Private Sub OnLoginAutChanging(value As String)
    End Sub
    Partial Private Sub OnLoginAutChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CREDITOS = New EntitySet(Of CREDITOS)(AddressOf Me.attach_CREDITOS, AddressOf Me.detach_CREDITOS)
		Me._CATPLAZOS = CType(Nothing, EntityRef(Of CATPLAZOS))
		Me._CATPLAZOS1 = CType(Nothing, EntityRef(Of CATPLAZOS))
		Me._CATTIPOPAGOS = CType(Nothing, EntityRef(Of CATTIPOPAGOS))
		Me._CLIENTES = CType(Nothing, EntityRef(Of CLIENTES))
		Me._CREDITOS1 = CType(Nothing, EntityRef(Of CREDITOS))
		Me._USUARIOS = CType(Nothing, EntityRef(Of USUARIOS))
		Me._USUARIOS1 = CType(Nothing, EntityRef(Of USUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_Cliente", DbType:="Int NOT NULL")>  _
	Public Property Id_Cliente() As Integer
		Get
			Return Me._Id_Cliente
		End Get
		Set
			If ((Me._Id_Cliente = value)  _
						= false) Then
				If Me._CLIENTES.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_ClienteChanging(value)
				Me.SendPropertyChanging
				Me._Id_Cliente = value
				Me.SendPropertyChanged("Id_Cliente")
				Me.OnId_ClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecSolicitud", DbType:="DateTime NOT NULL")>  _
	Public Property FecSolicitud() As Date
		Get
			Return Me._FecSolicitud
		End Get
		Set
			If ((Me._FecSolicitud = value)  _
						= false) Then
				Me.OnFecSolicitudChanging(value)
				Me.SendPropertyChanging
				Me._FecSolicitud = value
				Me.SendPropertyChanged("FecSolicitud")
				Me.OnFecSolicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecAutorizado", DbType:="DateTime")>  _
	Public Property FecAutorizado() As System.Nullable(Of Date)
		Get
			Return Me._FecAutorizado
		End Get
		Set
			If (Me._FecAutorizado.Equals(value) = false) Then
				Me.OnFecAutorizadoChanging(value)
				Me.SendPropertyChanging
				Me._FecAutorizado = value
				Me.SendPropertyChanged("FecAutorizado")
				Me.OnFecAutorizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecDisposicion", DbType:="DateTime")>  _
	Public Property FecDisposicion() As System.Nullable(Of Date)
		Get
			Return Me._FecDisposicion
		End Get
		Set
			If (Me._FecDisposicion.Equals(value) = false) Then
				Me.OnFecDisposicionChanging(value)
				Me.SendPropertyChanging
				Me._FecDisposicion = value
				Me.SendPropertyChanged("FecDisposicion")
				Me.OnFecDisposicionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MontoSolicitud", DbType:="Money NOT NULL")>  _
	Public Property MontoSolicitud() As Decimal
		Get
			Return Me._MontoSolicitud
		End Get
		Set
			If ((Me._MontoSolicitud = value)  _
						= false) Then
				Me.OnMontoSolicitudChanging(value)
				Me.SendPropertyChanging
				Me._MontoSolicitud = value
				Me.SendPropertyChanged("MontoSolicitud")
				Me.OnMontoSolicitudChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MontoAut", DbType:="Money")>  _
	Public Property MontoAut() As System.Nullable(Of Decimal)
		Get
			Return Me._MontoAut
		End Get
		Set
			If (Me._MontoAut.Equals(value) = false) Then
				Me.OnMontoAutChanging(value)
				Me.SendPropertyChanging
				Me._MontoAut = value
				Me.SendPropertyChanged("MontoAut")
				Me.OnMontoAutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoSol", DbType:="Int NOT NULL")>  _
	Public Property PlazoSol() As Integer
		Get
			Return Me._PlazoSol
		End Get
		Set
			If ((Me._PlazoSol = value)  _
						= false) Then
				If Me._CATPLAZOS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlazoSolChanging(value)
				Me.SendPropertyChanging
				Me._PlazoSol = value
				Me.SendPropertyChanged("PlazoSol")
				Me.OnPlazoSolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PlazoAut", DbType:="Int")>  _
	Public Property PlazoAut() As System.Nullable(Of Integer)
		Get
			Return Me._PlazoAut
		End Get
		Set
			If (Me._PlazoAut.Equals(value) = false) Then
				If Me._CATPLAZOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPlazoAutChanging(value)
				Me.SendPropertyChanging
				Me._PlazoAut = value
				Me.SendPropertyChanged("PlazoAut")
				Me.OnPlazoAutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumPagosSol", DbType:="Int NOT NULL")>  _
	Public Property NumPagosSol() As Integer
		Get
			Return Me._NumPagosSol
		End Get
		Set
			If ((Me._NumPagosSol = value)  _
						= false) Then
				Me.OnNumPagosSolChanging(value)
				Me.SendPropertyChanging
				Me._NumPagosSol = value
				Me.SendPropertyChanged("NumPagosSol")
				Me.OnNumPagosSolChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NumPagosAut", DbType:="Int")>  _
	Public Property NumPagosAut() As System.Nullable(Of Integer)
		Get
			Return Me._NumPagosAut
		End Get
		Set
			If (Me._NumPagosAut.Equals(value) = false) Then
				Me.OnNumPagosAutChanging(value)
				Me.SendPropertyChanging
				Me._NumPagosAut = value
				Me.SendPropertyChanged("NumPagosAut")
				Me.OnNumPagosAutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LiquidaAnterior", DbType:="Bit NOT NULL")>  _
	Public Property LiquidaAnterior() As Boolean
		Get
			Return Me._LiquidaAnterior
		End Get
		Set
			If ((Me._LiquidaAnterior = value)  _
						= false) Then
				Me.OnLiquidaAnteriorChanging(value)
				Me.SendPropertyChanging
				Me._LiquidaAnterior = value
				Me.SendPropertyChanged("LiquidaAnterior")
				Me.OnLiquidaAnteriorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id_A_Liquidar", DbType:="Int")>  _
	Public Property Id_A_Liquidar() As System.Nullable(Of Integer)
		Get
			Return Me._Id_A_Liquidar
		End Get
		Set
			If (Me._Id_A_Liquidar.Equals(value) = false) Then
				If Me._CREDITOS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnId_A_LiquidarChanging(value)
				Me.SendPropertyChanging
				Me._Id_A_Liquidar = value
				Me.SendPropertyChanged("Id_A_Liquidar")
				Me.OnId_A_LiquidarChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MontoLiquid", DbType:="Money")>  _
	Public Property MontoLiquid() As System.Nullable(Of Decimal)
		Get
			Return Me._MontoLiquid
		End Get
		Set
			If (Me._MontoLiquid.Equals(value) = false) Then
				Me.OnMontoLiquidChanging(value)
				Me.SendPropertyChanging
				Me._MontoLiquid = value
				Me.SendPropertyChanged("MontoLiquid")
				Me.OnMontoLiquidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TasaRef", DbType:="Float NOT NULL")>  _
	Public Property TasaRef() As Double
		Get
			Return Me._TasaRef
		End Get
		Set
			If ((Me._TasaRef = value)  _
						= false) Then
				Me.OnTasaRefChanging(value)
				Me.SendPropertyChanging
				Me._TasaRef = value
				Me.SendPropertyChanged("TasaRef")
				Me.OnTasaRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoAmort", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoAmort() As String
		Get
			Return Me._TipoAmort
		End Get
		Set
			If (String.Equals(Me._TipoAmort, value) = false) Then
				Me.OnTipoAmortChanging(value)
				Me.SendPropertyChanging
				Me._TipoAmort = value
				Me.SendPropertyChanged("TipoAmort")
				Me.OnTipoAmortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sobretasa", DbType:="Float NOT NULL")>  _
	Public Property Sobretasa() As Double
		Get
			Return Me._Sobretasa
		End Get
		Set
			If ((Me._Sobretasa = value)  _
						= false) Then
				Me.OnSobretasaChanging(value)
				Me.SendPropertyChanging
				Me._Sobretasa = value
				Me.SendPropertyChanged("Sobretasa")
				Me.OnSobretasaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TasaMoratoria", DbType:="Float NOT NULL")>  _
	Public Property TasaMoratoria() As Double
		Get
			Return Me._TasaMoratoria
		End Get
		Set
			If ((Me._TasaMoratoria = value)  _
						= false) Then
				Me.OnTasaMoratoriaChanging(value)
				Me.SendPropertyChanging
				Me._TasaMoratoria = value
				Me.SendPropertyChanged("TasaMoratoria")
				Me.OnTasaMoratoriaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Impuesto", DbType:="Money NOT NULL")>  _
	Public Property Impuesto() As Decimal
		Get
			Return Me._Impuesto
		End Get
		Set
			If ((Me._Impuesto = value)  _
						= false) Then
				Me.OnImpuestoChanging(value)
				Me.SendPropertyChanging
				Me._Impuesto = value
				Me.SendPropertyChanged("Impuesto")
				Me.OnImpuestoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoGarantia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TipoGarantia() As String
		Get
			Return Me._TipoGarantia
		End Get
		Set
			If (String.Equals(Me._TipoGarantia, value) = false) Then
				Me.OnTipoGarantiaChanging(value)
				Me.SendPropertyChanging
				Me._TipoGarantia = value
				Me.SendPropertyChanged("TipoGarantia")
				Me.OnTipoGarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClaseGarantia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property ClaseGarantia() As String
		Get
			Return Me._ClaseGarantia
		End Get
		Set
			If (String.Equals(Me._ClaseGarantia, value) = false) Then
				Me.OnClaseGarantiaChanging(value)
				Me.SendPropertyChanging
				Me._ClaseGarantia = value
				Me.SendPropertyChanged("ClaseGarantia")
				Me.OnClaseGarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ValorGarantia", DbType:="Money NOT NULL")>  _
	Public Property ValorGarantia() As Decimal
		Get
			Return Me._ValorGarantia
		End Get
		Set
			If ((Me._ValorGarantia = value)  _
						= false) Then
				Me.OnValorGarantiaChanging(value)
				Me.SendPropertyChanging
				Me._ValorGarantia = value
				Me.SendPropertyChanged("ValorGarantia")
				Me.OnValorGarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DescripGarantia", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property DescripGarantia() As String
		Get
			Return Me._DescripGarantia
		End Get
		Set
			If (String.Equals(Me._DescripGarantia, value) = false) Then
				Me.OnDescripGarantiaChanging(value)
				Me.SendPropertyChanging
				Me._DescripGarantia = value
				Me.SendPropertyChanged("DescripGarantia")
				Me.OnDescripGarantiaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IngresoCliente", DbType:="Int")>  _
	Public Property IngresoCliente() As System.Nullable(Of Integer)
		Get
			Return Me._IngresoCliente
		End Get
		Set
			If (Me._IngresoCliente.Equals(value) = false) Then
				Me.OnIngresoClienteChanging(value)
				Me.SendPropertyChanging
				Me._IngresoCliente = value
				Me.SendPropertyChanged("IngresoCliente")
				Me.OnIngresoClienteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TipoPago", DbType:="Int NOT NULL")>  _
	Public Property TipoPago() As Integer
		Get
			Return Me._TipoPago
		End Get
		Set
			If ((Me._TipoPago = value)  _
						= false) Then
				If Me._CATTIPOPAGOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipoPagoChanging(value)
				Me.SendPropertyChanging
				Me._TipoPago = value
				Me.SendPropertyChanged("TipoPago")
				Me.OnTipoPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pago", DbType:="Money")>  _
	Public Property Pago() As System.Nullable(Of Decimal)
		Get
			Return Me._Pago
		End Get
		Set
			If (Me._Pago.Equals(value) = false) Then
				Me.OnPagoChanging(value)
				Me.SendPropertyChanging
				Me._Pago = value
				Me.SendPropertyChanged("Pago")
				Me.OnPagoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecCaptura", DbType:="DateTime NOT NULL")>  _
	Public Property FecCaptura() As Date
		Get
			Return Me._FecCaptura
		End Get
		Set
			If ((Me._FecCaptura = value)  _
						= false) Then
				Me.OnFecCapturaChanging(value)
				Me.SendPropertyChanging
				Me._FecCaptura = value
				Me.SendPropertyChanged("FecCaptura")
				Me.OnFecCapturaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FecUltMod", DbType:="DateTime NOT NULL")>  _
	Public Property FecUltMod() As Date
		Get
			Return Me._FecUltMod
		End Get
		Set
			If ((Me._FecUltMod = value)  _
						= false) Then
				Me.OnFecUltModChanging(value)
				Me.SendPropertyChanging
				Me._FecUltMod = value
				Me.SendPropertyChanged("FecUltMod")
				Me.OnFecUltModChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				If Me._USUARIOS.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Autorizado", DbType:="Bit NOT NULL")>  _
	Public Property Autorizado() As Boolean
		Get
			Return Me._Autorizado
		End Get
		Set
			If ((Me._Autorizado = value)  _
						= false) Then
				Me.OnAutorizadoChanging(value)
				Me.SendPropertyChanging
				Me._Autorizado = value
				Me.SendPropertyChanged("Autorizado")
				Me.OnAutorizadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LoginAut", DbType:="VarChar(20)")>  _
	Public Property LoginAut() As String
		Get
			Return Me._LoginAut
		End Get
		Set
			If (String.Equals(Me._LoginAut, value) = false) Then
				If Me._USUARIOS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnLoginAutChanging(value)
				Me.SendPropertyChanging
				Me._LoginAut = value
				Me.SendPropertyChanged("LoginAut")
				Me.OnLoginAutChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SOLICITUDES_CREDITOS", Storage:="_CREDITOS", ThisKey:="Id", OtherKey:="Id_Sol")>  _
	Public Property CREDITOS() As EntitySet(Of CREDITOS)
		Get
			Return Me._CREDITOS
		End Get
		Set
			Me._CREDITOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATPLAZOS_SOLICITUDES", Storage:="_CATPLAZOS", ThisKey:="PlazoAut", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CATPLAZOS() As CATPLAZOS
		Get
			Return Me._CATPLAZOS.Entity
		End Get
		Set
			Dim previousValue As CATPLAZOS = Me._CATPLAZOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATPLAZOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATPLAZOS.Entity = Nothing
					previousValue.SOLICITUDES.Remove(Me)
				End If
				Me._CATPLAZOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES.Add(Me)
					Me._PlazoAut = value.Id
				Else
					Me._PlazoAut = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CATPLAZOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATPLAZOS_SOLICITUDES1", Storage:="_CATPLAZOS1", ThisKey:="PlazoSol", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CATPLAZOS1() As CATPLAZOS
		Get
			Return Me._CATPLAZOS1.Entity
		End Get
		Set
			Dim previousValue As CATPLAZOS = Me._CATPLAZOS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATPLAZOS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATPLAZOS1.Entity = Nothing
					previousValue.SOLICITUDES1.Remove(Me)
				End If
				Me._CATPLAZOS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES1.Add(Me)
					Me._PlazoSol = value.Id
				Else
					Me._PlazoSol = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATPLAZOS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOPAGOS_SOLICITUDES", Storage:="_CATTIPOPAGOS", ThisKey:="TipoPago", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CATTIPOPAGOS() As CATTIPOPAGOS
		Get
			Return Me._CATTIPOPAGOS.Entity
		End Get
		Set
			Dim previousValue As CATTIPOPAGOS = Me._CATTIPOPAGOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATTIPOPAGOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATTIPOPAGOS.Entity = Nothing
					previousValue.SOLICITUDES.Remove(Me)
				End If
				Me._CATTIPOPAGOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES.Add(Me)
					Me._TipoPago = value.Id
				Else
					Me._TipoPago = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATTIPOPAGOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CLIENTES_SOLICITUDES", Storage:="_CLIENTES", ThisKey:="Id_Cliente", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CLIENTES() As CLIENTES
		Get
			Return Me._CLIENTES.Entity
		End Get
		Set
			Dim previousValue As CLIENTES = Me._CLIENTES.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CLIENTES.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CLIENTES.Entity = Nothing
					previousValue.SOLICITUDES.Remove(Me)
				End If
				Me._CLIENTES.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES.Add(Me)
					Me._Id_Cliente = value.Id
				Else
					Me._Id_Cliente = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CLIENTES")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CREDITOS_SOLICITUDES", Storage:="_CREDITOS1", ThisKey:="Id_A_Liquidar", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CREDITOS1() As CREDITOS
		Get
			Return Me._CREDITOS1.Entity
		End Get
		Set
			Dim previousValue As CREDITOS = Me._CREDITOS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CREDITOS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CREDITOS1.Entity = Nothing
					previousValue.SOLICITUDES1.Remove(Me)
				End If
				Me._CREDITOS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES1.Add(Me)
					Me._Id_A_Liquidar = value.Id
				Else
					Me._Id_A_Liquidar = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("CREDITOS1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_SOLICITUDES", Storage:="_USUARIOS", ThisKey:="Login", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS() As USUARIOS
		Get
			Return Me._USUARIOS.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS.Entity = Nothing
					previousValue.SOLICITUDES.Remove(Me)
				End If
				Me._USUARIOS.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES.Add(Me)
					Me._Login = value.Login
				Else
					Me._Login = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_SOLICITUDES1", Storage:="_USUARIOS1", ThisKey:="LoginAut", OtherKey:="Login", IsForeignKey:=true)>  _
	Public Property USUARIOS1() As USUARIOS
		Get
			Return Me._USUARIOS1.Entity
		End Get
		Set
			Dim previousValue As USUARIOS = Me._USUARIOS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._USUARIOS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._USUARIOS1.Entity = Nothing
					previousValue.SOLICITUDES1.Remove(Me)
				End If
				Me._USUARIOS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SOLICITUDES1.Add(Me)
					Me._LoginAut = value.Login
				Else
					Me._LoginAut = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("USUARIOS1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.SOLICITUDES = Me
	End Sub
	
	Private Sub detach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.SOLICITUDES = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.USUARIOS")>  _
Partial Public Class USUARIOS
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Login As String
	
	Private _Pass As String
	
	Private _Nombre As String
	
	Private _Estado As Boolean
	
	Private _Tipo As Integer
	
	Private _Sucursal As Integer
	
	Private _CATTIPOCLIENTES As EntitySet(Of CATTIPOCLIENTES)
	
	Private _CATSUCURSALES As EntitySet(Of CATSUCURSALES)
	
	Private _CATTIPOPAGOS As EntitySet(Of CATTIPOPAGOS)
	
	Private _CATTIPOUSUARIOS As EntitySet(Of CATTIPOUSUARIOS)
	
	Private _CLIENTES As EntitySet(Of CLIENTES)
	
	Private _CREDITOS As EntitySet(Of CREDITOS)
	
	Private _PAGOS As EntitySet(Of PAGOS)
	
	Private _SOLICITUDES As EntitySet(Of SOLICITUDES)
	
	Private _SOLICITUDES1 As EntitySet(Of SOLICITUDES)
	
	Private _CATSUCURSALES1 As EntityRef(Of CATSUCURSALES)
	
	Private _CATTIPOUSUARIOS1 As EntityRef(Of CATTIPOUSUARIOS)
	
    #Region "Definiciones de métodos de extensibilidad"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLoginChanging(value As String)
    End Sub
    Partial Private Sub OnLoginChanged()
    End Sub
    Partial Private Sub OnPassChanging(value As String)
    End Sub
    Partial Private Sub OnPassChanged()
    End Sub
    Partial Private Sub OnNombreChanging(value As String)
    End Sub
    Partial Private Sub OnNombreChanged()
    End Sub
    Partial Private Sub OnEstadoChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEstadoChanged()
    End Sub
    Partial Private Sub OnTipoChanging(value As Integer)
    End Sub
    Partial Private Sub OnTipoChanged()
    End Sub
    Partial Private Sub OnSucursalChanging(value As Integer)
    End Sub
    Partial Private Sub OnSucursalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CATTIPOCLIENTES = New EntitySet(Of CATTIPOCLIENTES)(AddressOf Me.attach_CATTIPOCLIENTES, AddressOf Me.detach_CATTIPOCLIENTES)
		Me._CATSUCURSALES = New EntitySet(Of CATSUCURSALES)(AddressOf Me.attach_CATSUCURSALES, AddressOf Me.detach_CATSUCURSALES)
		Me._CATTIPOPAGOS = New EntitySet(Of CATTIPOPAGOS)(AddressOf Me.attach_CATTIPOPAGOS, AddressOf Me.detach_CATTIPOPAGOS)
		Me._CATTIPOUSUARIOS = New EntitySet(Of CATTIPOUSUARIOS)(AddressOf Me.attach_CATTIPOUSUARIOS, AddressOf Me.detach_CATTIPOUSUARIOS)
		Me._CLIENTES = New EntitySet(Of CLIENTES)(AddressOf Me.attach_CLIENTES, AddressOf Me.detach_CLIENTES)
		Me._CREDITOS = New EntitySet(Of CREDITOS)(AddressOf Me.attach_CREDITOS, AddressOf Me.detach_CREDITOS)
		Me._PAGOS = New EntitySet(Of PAGOS)(AddressOf Me.attach_PAGOS, AddressOf Me.detach_PAGOS)
		Me._SOLICITUDES = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES, AddressOf Me.detach_SOLICITUDES)
		Me._SOLICITUDES1 = New EntitySet(Of SOLICITUDES)(AddressOf Me.attach_SOLICITUDES1, AddressOf Me.detach_SOLICITUDES1)
		Me._CATSUCURSALES1 = CType(Nothing, EntityRef(Of CATSUCURSALES))
		Me._CATTIPOUSUARIOS1 = CType(Nothing, EntityRef(Of CATTIPOUSUARIOS))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Login", DbType:="VarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Login() As String
		Get
			Return Me._Login
		End Get
		Set
			If (String.Equals(Me._Login, value) = false) Then
				Me.OnLoginChanging(value)
				Me.SendPropertyChanging
				Me._Login = value
				Me.SendPropertyChanged("Login")
				Me.OnLoginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pass", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Pass() As String
		Get
			Return Me._Pass
		End Get
		Set
			If (String.Equals(Me._Pass, value) = false) Then
				Me.OnPassChanging(value)
				Me.SendPropertyChanging
				Me._Pass = value
				Me.SendPropertyChanged("Pass")
				Me.OnPassChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Nombre", DbType:="VarChar(80) NOT NULL", CanBeNull:=false)>  _
	Public Property Nombre() As String
		Get
			Return Me._Nombre
		End Get
		Set
			If (String.Equals(Me._Nombre, value) = false) Then
				Me.OnNombreChanging(value)
				Me.SendPropertyChanging
				Me._Nombre = value
				Me.SendPropertyChanged("Nombre")
				Me.OnNombreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Estado", DbType:="Bit NOT NULL")>  _
	Public Property Estado() As Boolean
		Get
			Return Me._Estado
		End Get
		Set
			If ((Me._Estado = value)  _
						= false) Then
				Me.OnEstadoChanging(value)
				Me.SendPropertyChanging
				Me._Estado = value
				Me.SendPropertyChanged("Estado")
				Me.OnEstadoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Tipo", DbType:="Int NOT NULL")>  _
	Public Property Tipo() As Integer
		Get
			Return Me._Tipo
		End Get
		Set
			If ((Me._Tipo = value)  _
						= false) Then
				If Me._CATTIPOUSUARIOS1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTipoChanging(value)
				Me.SendPropertyChanging
				Me._Tipo = value
				Me.SendPropertyChanged("Tipo")
				Me.OnTipoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sucursal", DbType:="Int NOT NULL")>  _
	Public Property Sucursal() As Integer
		Get
			Return Me._Sucursal
		End Get
		Set
			If ((Me._Sucursal = value)  _
						= false) Then
				If Me._CATSUCURSALES1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSucursalChanging(value)
				Me.SendPropertyChanging
				Me._Sucursal = value
				Me.SendPropertyChanged("Sucursal")
				Me.OnSucursalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOCLIENTES", Storage:="_CATTIPOCLIENTES", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CATTIPOCLIENTES() As EntitySet(Of CATTIPOCLIENTES)
		Get
			Return Me._CATTIPOCLIENTES
		End Get
		Set
			Me._CATTIPOCLIENTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATSUCURSALES", Storage:="_CATSUCURSALES", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CATSUCURSALES() As EntitySet(Of CATSUCURSALES)
		Get
			Return Me._CATSUCURSALES
		End Get
		Set
			Me._CATSUCURSALES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOPAGOS", Storage:="_CATTIPOPAGOS", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CATTIPOPAGOS() As EntitySet(Of CATTIPOPAGOS)
		Get
			Return Me._CATTIPOPAGOS
		End Get
		Set
			Me._CATTIPOPAGOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CATTIPOUSUARIOS", Storage:="_CATTIPOUSUARIOS", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CATTIPOUSUARIOS() As EntitySet(Of CATTIPOUSUARIOS)
		Get
			Return Me._CATTIPOUSUARIOS
		End Get
		Set
			Me._CATTIPOUSUARIOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CLIENTES", Storage:="_CLIENTES", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CLIENTES() As EntitySet(Of CLIENTES)
		Get
			Return Me._CLIENTES
		End Get
		Set
			Me._CLIENTES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_CREDITOS", Storage:="_CREDITOS", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property CREDITOS() As EntitySet(Of CREDITOS)
		Get
			Return Me._CREDITOS
		End Get
		Set
			Me._CREDITOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_PAGOS", Storage:="_PAGOS", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property PAGOS() As EntitySet(Of PAGOS)
		Get
			Return Me._PAGOS
		End Get
		Set
			Me._PAGOS.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_SOLICITUDES", Storage:="_SOLICITUDES", ThisKey:="Login", OtherKey:="Login")>  _
	Public Property SOLICITUDES() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES
		End Get
		Set
			Me._SOLICITUDES.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="USUARIOS_SOLICITUDES1", Storage:="_SOLICITUDES1", ThisKey:="Login", OtherKey:="LoginAut")>  _
	Public Property SOLICITUDES1() As EntitySet(Of SOLICITUDES)
		Get
			Return Me._SOLICITUDES1
		End Get
		Set
			Me._SOLICITUDES1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATSUCURSALES_USUARIOS", Storage:="_CATSUCURSALES1", ThisKey:="Sucursal", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property CATSUCURSALES1() As CATSUCURSALES
		Get
			Return Me._CATSUCURSALES1.Entity
		End Get
		Set
			Dim previousValue As CATSUCURSALES = Me._CATSUCURSALES1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATSUCURSALES1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATSUCURSALES1.Entity = Nothing
					previousValue.USUARIOS1.Remove(Me)
				End If
				Me._CATSUCURSALES1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.USUARIOS1.Add(Me)
					Me._Sucursal = value.Id
				Else
					Me._Sucursal = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATSUCURSALES1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CATTIPOUSUARIOS_USUARIOS", Storage:="_CATTIPOUSUARIOS1", ThisKey:="Tipo", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property CATTIPOUSUARIOS1() As CATTIPOUSUARIOS
		Get
			Return Me._CATTIPOUSUARIOS1.Entity
		End Get
		Set
			Dim previousValue As CATTIPOUSUARIOS = Me._CATTIPOUSUARIOS1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CATTIPOUSUARIOS1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CATTIPOUSUARIOS1.Entity = Nothing
					previousValue.USUARIOS1.Remove(Me)
				End If
				Me._CATTIPOUSUARIOS1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.USUARIOS1.Add(Me)
					Me._Tipo = value.id
				Else
					Me._Tipo = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CATTIPOUSUARIOS1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CATTIPOCLIENTES(ByVal entity As CATTIPOCLIENTES)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CATTIPOCLIENTES(ByVal entity As CATTIPOCLIENTES)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_CATSUCURSALES(ByVal entity As CATSUCURSALES)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CATSUCURSALES(ByVal entity As CATSUCURSALES)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_CATTIPOPAGOS(ByVal entity As CATTIPOPAGOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CATTIPOPAGOS(ByVal entity As CATTIPOPAGOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_CATTIPOUSUARIOS(ByVal entity As CATTIPOUSUARIOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CATTIPOUSUARIOS(ByVal entity As CATTIPOUSUARIOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_CLIENTES(ByVal entity As CLIENTES)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CLIENTES(ByVal entity As CLIENTES)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_CREDITOS(ByVal entity As CREDITOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_PAGOS(ByVal entity As PAGOS)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.USUARIOS = Me
	End Sub
	
	Private Sub detach_SOLICITUDES(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.USUARIOS = Nothing
	End Sub
	
	Private Sub attach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.USUARIOS1 = Me
	End Sub
	
	Private Sub detach_SOLICITUDES1(ByVal entity As SOLICITUDES)
		Me.SendPropertyChanging
		entity.USUARIOS1 = Nothing
	End Sub
End Class
